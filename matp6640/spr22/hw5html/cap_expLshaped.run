#
# a stochastic server location model
#
reset;

model cap_expLshaped.mod;

data cap_exp.dat;

param tol default 1.e-6;
param itercount default 0;

problem master: x,theta,masterval,cost,calc_obj,UBtheta,cuts;

problem dualsubproblem{s in SCENARIOS}: pi,sigma,dualobjval,
  dualobjcalc[s],dualobj,dualconssource,dualconsother,sigmaUB;

param UB default (sum{s in SCENARIOS} prob[s] * sum{v in SINKS} shortfallcost[v] * demand[v,s]);
param LB default 0;

param Thetaval{s in SCENARIOS,1..ncuts[s]};

repeat {
let itercount := itercount + 1;
printf "Solve Master Problem\n";

solve master;

let LB := masterval;

for {(i,j) in EDGES} {
  let xMP[i,j] := x[i,j];
}
display xMP, theta;

display _total_solve_elapsed_time;

for {s in SCENARIOS} {
  printf "Solve dual subproblem\n";
#  display s;
  solve dualsubproblem[s];
  
  let ncuts[s] := ncuts[s]+1;
  
  for {(i,j) in EDGES} {
    let zeta[s,i,j,ncuts[s]] := pi[i,j];
  }
  let rhs[s,ncuts[s]] := dualobjval + sum{(i,j) in EDGES} zeta[s,i,j,ncuts[s]] * xMP[i,j];
  let Thetaval[s,ncuts[s]] := dualobjval;
  
#  display pi;
#  display sigma;
#  display zeta;
#  display rhs;
  
  
}

display rhs;

let UB := min(UB, sum{(i,j) in EDGES} capexpcost[i,j] * xMP[i,j]  + sum{s in SCENARIOS} prob[s] * Thetaval[s,ncuts[s]]  );
  
display itercount, LB, UB;

display _total_solve_elapsed_time;


} while (UB-LB > tol && itercount < 5);

display x;


display _total_solve_elapsed_time;

display _total_solve_system_time;

display _total_shell_time;

display _ampl_time;

display _total_solve_time;
