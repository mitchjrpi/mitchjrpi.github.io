reset;
display _total_solve_elapsed_time;
option solver knitroampl;
model QPsetf.mod;
data QPsetf.dat;

display xbar;
display g;
display b;

param LBmcc;
param LBsocp;

problem originalQP:x, c0obj, cQ, lincon;

#option randseed 4513905;

#

#option solver knitroampl;

printf "parameters n=%3i, nQ=%3i, m=%3i, p=%3i\n", n,nQ,m,p >> QPloopf.out;

solve originalQP;

if solve_exitcode == 0 then {
   let UBobj := sum{j in 1..n} c0[j] * x[j]
     + 0.5 * sum{i in 1..p} Qdiag[i,0] *x[i] *x[i]
     + sum{i in 1..p-1, j in i+1..p} Q[i,j,0] *x[i] * x[j];
}
else {
   display solve_exitcode;
   let UBobj := sum{j in 1..n} c0[j] * xbar[j]
     + 0.5 * sum{i in 1..p} Qdiag[i,0] *xbar[i] *xbar[i]
     + sum{i in 1..p-1, j in i+1..p} Q[i,j,0] *xbar[i] * xbar[j];
   #let UBobj := 0;
}

#display Q, g;

display x;
display _total_solve_elapsed_time;

printf "knitro time  %12.4e\n", _total_solve_elapsed_time >> QPloopf.out;

printf "param n := %3i;\n", n > tempf.dat;
printf "param nQ := %3i;\n", nQ > tempf.dat;
printf "param m := %3i;\n", m > tempf.dat;
printf "param p := %3i;\n", p > tempf.dat;
printf "param UBobj := %12.8e ;\n", UBobj > tempf.dat;
printf "set PAIRS := ;\n" > tempf.dat;

display sum{i in 1..n} c0[i];

reset;
display _total_solve_elapsed_time;
option solver cplexamp;
model QPsetf.mod;
data tempf.dat;

param nrefine := 1;
param LBmcc;
param LBmccB{k in 1..nrefine};
param LBsocp;
param LBsocpP;
param LBsocp13;
param LBm;
param LBm2;
param LBs;
param frac;
param fracm2;
param fracI;
param fracP;
param frac13;
param prevtime;
param stoprefine;
param refinecrash;


param wxxmcc;
param wxxmccB;
param wxx;
param wxxmccdiff;
param wxxmccBdiff;
param wxxdiff;
param diff;

param maxpairs;
param wviol{i in 1..p-1, j in i+1..p};
param maxviol;
param imax;
param jmax;

param Bdiff{i in 1..p-1, j in i+1..p};
param BPdiff{i in 1..p-1, j in i+1..p};

param Bdiff13{i in 1..p-1, j in i+1..p};
param BPdiff13{i in 1..p-1, j in i+1..p};

param Bdiff31{i in 1..p-1, j in i+1..p};
param BPdiff31{i in 1..p-1, j in i+1..p};

#problem originalQP:x, c0obj, cQ;

problem QPmcc: x, w, c0objlin, cQlin, lincon,
McCormicka, McCormickb, McCormickc;

problem QPmccB: x, w, c0objlin, cQlin, lincon,
McCormickaB, McCormickbB, McCormickcB, McCormickdB;

problem QPsocp: x, w, c0objlin, cQlin, lincon,
#McCormicka, McCormickb, McCormickc,
McCormickaB, McCormickbB, McCormickcB, McCormickdB,
soc;

problem QPsocpP: x, w, c0objlin, cQlin, lincon,
#McCormicka, McCormickb, McCormickc,
McCormickaB, McCormickbB, McCormickcB, McCormickdB,
soc, socP;

problem QPsocp13: x, w, c0objlin, cQlin, lincon,
#McCormicka, McCormickb, McCormickc,
McCormickaB, McCormickbB, McCormickcB, McCormickdB,
soc, socP,
soc13, soc31, socP13, socP31;

problem findLBx{i in 1..p}: x, w, optLBx[i], cQlin, lincon,
McCormicka, McCormickb, McCormickc,
bound_obj;

problem findUBx{i in 1..p}: x, w, optUBx[i], cQlin, lincon,
McCormicka, McCormickb, McCormickc,
bound_obj;

problem findLB{i in 1..p-1, j in i+1..p}: x, w, optLB[i,j], cQlin, lincon,
#McCormicka, McCormickb, McCormickc,
McCormickaB, McCormickbB, McCormickcB, McCormickdB,
bound_obj;

problem findUB{i in 1..p-1, j in i+1..p}: x, w, optUB[i,j], cQlin, lincon,
#McCormicka, McCormickb, McCormickc,
McCormickaB, McCormickbB, McCormickcB, McCormickdB,
bound_obj;

problem findLBP{i in 1..p-1, j in i+1..p}: x, w, optLBP[i,j], cQlin, lincon,
#McCormicka, McCormickb, McCormickc,
McCormickaB, McCormickbB, McCormickcB, McCormickdB,
bound_obj;

problem findUBP{i in 1..p-1, j in i+1..p}: x, w, optUBP[i,j], cQlin, lincon,
#McCormicka, McCormickb, McCormickc,
McCormickaB, McCormickbB, McCormickcB, McCormickdB,
bound_obj;

problem findLB13{i in 1..p-1, j in i+1..p}: x, w, optLB13[i,j], cQlin, lincon,
#McCormicka, McCormickb, McCormickc,
McCormickaB, McCormickbB, McCormickcB, McCormickdB,
#soc,socP,
bound_obj;

problem findUB13{i in 1..p-1, j in i+1..p}: x, w, optUB13[i,j], cQlin, lincon,
#McCormicka, McCormickb, McCormickc,
McCormickaB, McCormickbB, McCormickcB, McCormickdB,
#soc,socP,
bound_obj;

problem findLBP13{i in 1..p-1, j in i+1..p}: x, w, optLBP13[i,j], cQlin, lincon,
#McCormicka, McCormickb, McCormickc,
McCormickaB, McCormickbB, McCormickcB, McCormickdB,
#soc,socP,
bound_obj;

problem findUBP13{i in 1..p-1, j in i+1..p}: x, w, optUBP13[i,j], cQlin, lincon,
#McCormicka, McCormickb, McCormickc,
McCormickaB, McCormickbB, McCormickcB, McCormickdB,
#soc,socP,
bound_obj;

problem findLB31{i in 1..p-1, j in i+1..p}: x, w, optLB31[i,j], cQlin, lincon,
#McCormicka, McCormickb, McCormickc,
McCormickaB, McCormickbB, McCormickcB, McCormickdB,
#soc,socP,
bound_obj;

problem findUB31{i in 1..p-1, j in i+1..p}: x, w, optUB31[i,j], cQlin, lincon,
#McCormicka, McCormickb, McCormickc,
McCormickaB, McCormickbB, McCormickcB, McCormickdB,
#soc,socP,
bound_obj;

problem findLBP31{i in 1..p-1, j in i+1..p}: x, w, optLBP31[i,j], cQlin, lincon,
#McCormicka, McCormickb, McCormickc,
McCormickaB, McCormickbB, McCormickcB, McCormickdB,
#soc,socP,
bound_obj;

problem findUBP31{i in 1..p-1, j in i+1..p}: x, w, optUBP31[i,j], cQlin, lincon,
#McCormicka, McCormickb, McCormickc,
McCormickaB, McCormickbB, McCormickcB, McCormickdB,
#soc,socP,
bound_obj;

#
# initialize timer
#

let prevtime := 0;

#
# get the mccormick lower bound
#

solve QPmcc;

display LBx, UBx;

#display const_offset, Qdiag, scaleQdiag;

let UBobj := min(UBobj,sum{j in 1..n} c0[j] * xbar[j]
  + 0.5 * sum{i in 1..p} Qdiag[i,0] *xbar[i] *xbar[i]
  + sum{i in 1..p-1, j in i+1..p} Q[i,j,0] *xbar[i] * xbar[j]);

if solve_result_num > 5 then {
   printf "Unable to solve mcc relaxtion, code %i4\n",solve_result_num >> lpccloop.out;
   let LBm:=-1.e6;
   let LBm2:=-1.e6;
   let LBs:=-1.e6;
   display LBm, LBm2, LBs, UBobj >> lpccloop.out;
   let frac := 0;
   let fracm2 := 0;
   let fracI := 0;
   let fracP := 0;
   let frac13 := 0;
   display frac,fracm2,fracI,fracP,frac13 >> lpccloop.out;
}
else  {

#
# print out stuff for GAMS
#
printf "* problem QPncg\n" > QPncg;
printf "SET Vars   /x1*x%i/;\n",n > QPncg;
printf "SET QuadCons   /qc1*qc%i/;\n",nQ > QPncg;
printf "SET LinCons   /lin1*lin%i/;\n",m > QPncg;
printf "ALIAS(Vars,j,jj);\n \n" > QPncg;

#printf "SET kk /set.j.set.jj/; \n\n" > QPncg;

printf "SET Pairs(Vars,Vars)  / \n" > QPncg;
for {i in 1..n-2} {
  for {j in i+1..n} {
    printf "x%i",i > QPncg;
    printf ".x%i ,  ",j > QPncg;
  }
}
printf "x%i",n-1 > QPncg;
printf ".x%i   ",n > QPncg;
printf " / ; \n\n" > QPncg;


printf "PARAMETER c0(Vars)\n  /  \n" > QPncg;
for {i in 1..n} {
printf "x%i %16.8e \n",i,c0[i] > QPncg;
}
printf " / \n \n" > QPncg;

printf "PARAMETER g(QuadCons)\n  /  \n" > QPncg;
for {i in 1..nQ} {
printf "qc%i %16.8e \n",i,g[i] > QPncg;
}
printf " / \n \n" > QPncg;

printf "PARAMETER b(LinCons)\n  /  \n" > QPncg;
for {i in 1..m} {
printf "lin%i %16.8e \n",i,b[i] > QPncg;
}
printf " / \n \n" > QPncg;

printf "TABLE Q0(j,jj)\n               " > QPncg;
for {i in 1..n} {
printf " x%i                ",i > QPncg;
}
printf "\n" > QPncg;
for {i in 1..n} {
printf "x%i ",i > QPncg;
for {j in 1..i-1} {
printf "%16.8e    ",Q[j,i,0] > QPncg;
}
#printf "  0.000000000000    " > QPncg;
printf "%16.8e    ",Qdiag[i,0] > QPncg;
for {j in i+1..n} {
printf "%16.8e    ",Q[i,j,0] > QPncg;
}
printf "\n" > QPncg;
}
printf " ;\n\n" > QPncg;

printf "TABLE cmat(QuadCons,jj)\n               " > QPncg;
for {i in 1..n} {
printf " x%i                ",i > QPncg;
}
printf "\n" > QPncg;
for {i in 1..nQ} {
printf "qc%i",i > QPncg;
for {j in 1..n} {
printf "%16.8e    ",cmat[i,j] > QPncg;
}
printf "\n" > QPncg;
}
printf " ;\n\n" > QPncg;

printf "TABLE Q(j,jj,QuadCons)\n                     " > QPncg;
for {i in 1..nQ} {
printf " qc%i               ",i > QPncg;
}
printf "\n" > QPncg;
for {i in 1..n} {
for {j in 1..i-1} {
printf "x%i",i > QPncg;
printf ".x%i    ",j > QPncg;
for {k in 1..nQ} {
printf "%16.8e    ",Q[j,i,k] > QPncg;
}
printf "  \n " > QPncg;
}
printf "x%i",i > QPncg;
printf ".x%i    ",i > QPncg;
for {k in 1..nQ} {
printf "%16.8e    ",Qdiag[i,k] > QPncg;
}
printf "\n" > QPncg;
for {j in i+1..n} {
printf "x%i",i > QPncg;
printf ".x%i    ",j > QPncg;
for {k in 1..nQ} {
printf "%16.8e    ",Q[i,j,k] > QPncg;
}
printf "\n" > QPncg;
}
}
printf " ;\n\n" > QPncg;

printf "TABLE Amat(LinCons,jj)\n               " > QPncg;
for {i in 1..n} {
printf "   x%i              ",i > QPncg;
}
printf "\n" > QPncg;
for {i in 1..m} {
printf "lin%i  ",i > QPncg;
for {j in 1..n} {
printf "%16.8e    ",A[i,j] > QPncg;
}
printf "\n" > QPncg;
}
printf " ;\n\n" > QPncg;


#

let LBmcc := sum{j in 1..n} c0[j] * x[j]
  + 0.5 * sum{i in 1..p: Qdiag[i,0] > 0} Qdiag[i,0] *x[i] *x[i]
  + 0.5 * sum{i in 1..p : Qdiag[i,0] < 0} (const_offset[i,0] +
                  scaleQdiag[i,0] * (x[i]-LBx[i]))
  #+ 0.5 * sum{i in 1..p: Qdiag[i,0] < 0} Qdiag[i,0] *x[i]
  + sum{i in 1..p-1, j in i+1..p} Q[i,j,0] *w[i,j];

printf "mcc time  %12.4e\n", _total_solve_elapsed_time -prevtime >> QPloopf.out;
let prevtime := _total_solve_elapsed_time;


display x;
#display w;
let wxxmcc := 0;
let wxxmccdiff := 0;
printf "SET mccSet(Vars,Vars)  pairs with large diff for mcc relaxation  / \n" > QPncg;

for {i in 1..p-1, j in i+1..p} {
let diff := abs(w[i,j] - x[i]*x[j]);
let wxxmccdiff := wxxmccdiff + diff;
if diff > 0.01 then {
  let wxxmcc := wxxmcc+1;
    printf "x%i",i > QPncg;
    printf ".x%i \n  ",j > QPncg;
}
}
printf " / ; \n\n" > QPncg;


display _total_solve_elapsed_time;
let LBm:=LBmcc;

display LBm, UBobj;

display sum{i in 1..n} c0[i];

if UBobj - LBmcc < 1.e-6 then {
printf "McCormick bounds suffice\n";
let LBm2:=LBmcc;
let LBs:=LBmcc;
display LBm, LBm2, LBs, UBobj >> QPloopf.out;
let frac := 1;
let fracm2 := 1;
let fracI := 0;
let fracP := 0;
let frac13 := 0;
display frac,fracm2,fracI,fracP,frac13 >> QPloopf.out;

display UBobj, LBmcc;
display wxxmcc,wxxmccdiff >> QPloopf.out;
}
else {

let stoprefine := 0;
let refinecrash := 0;

let LBm2 := LBm;

for {i in 1..p} {
   let UBx[i] := 1.0;
   let LBx[i] := 0.0;
   for {kk in 0..nQ} {
      if Qdiag[i,kk] < 0 then {
        let const_offset[i,kk] := Qdiag[i,kk]*LBx[i]*LBx[i];
        let scaleQdiag[i,kk] := ((Qdiag[i,kk]*(UBx[i]*UBx[i]-LBx[i]*LBx[i]))
                                   / (UBx[i] - LBx[i]));
      }
   }
}

for {k in 1..nrefine} {
   if stoprefine == 0 then {

if k > 1 then {
let wxxmccB := 0;
let wxxmccBdiff := 0;
for {i in 1..p-1, j in i+1..p} {
let diff := abs(w[i,j] - x[i]*x[j]);
let wxxmccBdiff := wxxmccBdiff + diff;
if diff > 0.01 then {
  let wxxmccB := wxxmccB+1;
}
}
}
else {
  let wxxmccB := wxxmcc;
  let wxxmccBdiff := wxxmccdiff;
}
#
# refine bounds on x[i] to try to improve McCormick
#
for {i in 1..p} {
if x[i] > LBx[i] + 0.03 then {
if x[i] < UBx[i] - 0.03 then {
solve findUBx[i];
if solve_result_num < 6 then {
   let UBx[i] := x[i];
   for {kk in 0..nQ} {
      if Qdiag[i,kk] < 0 then {
        let const_offset[i,kk] := Qdiag[i,kk]*LBx[i]*LBx[i];
        let scaleQdiag[i,kk] := ((Qdiag[i,kk]*(UBx[i]*UBx[i]-LBx[i]*LBx[i]))
                                   / (UBx[i] - LBx[i]));
      }
   }
}
solve findLBx[i];
if solve_result_num < 6 then {
   let LBx[i] := x[i];
   for {kk in 0..nQ} {
      if Qdiag[i,kk] < 0 then {
        let const_offset[i,kk] := Qdiag[i,kk]*LBx[i]*LBx[i];
        let scaleQdiag[i,kk] := ((Qdiag[i,kk]*(UBx[i]*UBx[i]-LBx[i]*LBx[i]))
                                   / (UBx[i] - LBx[i]));
      }
   }
}
}
}
}

solve QPmccB;

if solve_result_num > 5 then {
if k > 1 then {
   let LBm2:=LBmccB[k-1];
}
else {
   let LBm2:=LBmcc;
}
let LBs:=LBm2;
printf "Refined McCormick bounds unsolvable for k=%3i\n",k;
display LBm, LBm2, LBs, UBobj >> lpccloop.out;
let frac := (LBs-LBm)/(UBobj-LBm);
let fracm2 := (LBm2-LBm)/(UBobj-LBm);
let fracI := (LBs-LBm2)/(UBobj-LBm);
let fracP := (LBs-LBm2)/(UBobj-LBm);
let frac13 := (LBs-LBm2)/(UBobj-LBm);
display frac,fracm2,fracI,fracP,frac13 >> lpccloop.out;
let stoprefine := 1;
let refinecrash := 1;

display wxxmcc,wxxmccdiff,wxxmccB,wxxmccBdiff >> lpccloop.out;

}
else {

let LBmccB[k] := sum{j in 1..n} c0[j] * x[j]
  + 0.5 * sum{i in 1..p: Qdiag[i,0] > 0} Qdiag[i,0] *x[i] *x[i]
  + 0.5 * sum{i in 1..p : Qdiag[i,0] < 0} (const_offset[i,0] +
                  scaleQdiag[i,0] * (x[i]-LBx[i]))
  #+ 0.5 * sum{i in 1..p: Qdiag[i,0] < 0} Qdiag[i,0] *x[i]
  + sum{i in 1..p-1, j in i+1..p} Q[i,j,0] *w[i,j];
if LBmccB[k] < LBm2 + 1.e-5 then {
   let stoprefine := 1;
}
else {
   let LBm2 := LBmccB[k];
}
}
}
}

display LBm, LBm2, UBobj;

display LBx, UBx;

# write out the refined bounds to the GAMS file

printf "PARAMETER LBx(Vars)\n  /  \n" > QPncg;
for {i in 1..n} {
printf "x%i %16.8e \n",i,LBx[i] > QPncg;
}
printf " / \n \n" > QPncg;

printf "PARAMETER UBx(Vars)\n  /  \n" > QPncg;
for {i in 1..n} {
printf "x%i %16.8e \n",i,UBx[i] > QPncg;
}
printf " / \n \n" > QPncg;

#

   if refinecrash == 0 then {

#display x;
#display w;
let wxxmccB := 0;
let wxxmccBdiff := 0;
for {i in 1..p-1, j in i+1..p} {
let diff := abs(w[i,j] - x[i]*x[j]);
let wviol[i,j] := diff;
let wxxmccBdiff := wxxmccBdiff + diff;
if diff > 0.01 then {
  let wxxmccB := wxxmccB+1;
}
}

# pick the most violated to add to PAIRS
printf "\$onempty \n" > QPncg;
printf "SET socSet(Vars,Vars)  pairs with large diff for soc relaxation  / \n" > QPncg;

let maxpairs := min(30,p);
for {k in 1..maxpairs} {
   let maxviol := 0.05;
   let imax := 0;
   for {i in 1..p-1, j in i+1..p} {
      if wviol[i,j] > maxviol then {
         let maxviol := wviol[i,j];
         let imax := i;
         let jmax := j;
      }
   }
   if imax > 0 then {
      let PAIRS := PAIRS union {(imax,jmax)};
      display imax,jmax, w[imax,jmax], x[imax], x[jmax], w[imax,jmax]-x[imax]*x[jmax], wviol[imax,jmax];
      printf "x%i",imax > QPncg;
      printf ".x%i \n  ",jmax > QPncg;
      let wviol[imax,jmax] := 0;
   }
}

display PAIRS;
display card(PAIRS) >> QPloopf.out;
printf " / ; \n\n" > QPncg;


printf "refine mcc time  %12.4e\n", _total_solve_elapsed_time -prevtime >> QPloopf.out;
let prevtime := _total_solve_elapsed_time;

display _total_solve_elapsed_time;

let fracm2 := (LBm2-LBm)/(UBobj-LBm);

if UBobj - LBm2 < 1.e-6 then {
printf "Improved McCormick bounds suffice\n";
let LBs:=LBm2;
display LBm, LBm2, LBs, UBobj >> QPloopf.out;
let frac := (LBm2-LBm)/(UBobj-LBm);
let fracI := 0;
let fracP := 0;
let frac13 := 0;
display frac,fracm2,fracI,fracP,frac13 >> QPloopf.out;

display UBobj, LBmcc, LBmccB;
display wxxmcc, wxxmccB, wxxmccdiff, wxxmccBdiff >> QPloopf.out;
}
else {

#
# get upper and lower bounds on x[i]+-x[j]
#


for {(i,j) in PAIRS} {
if j = i+1 then {
  display i;
}
solve findUB[i,j];
if solve_result_num < 6 then {
let UB[i,j] := x[i]-x[j];
}
else  {
let UB[i,j] := UBx[i]-LBx[j];
}

solve findLB[i,j];
if solve_result_num < 6 then {
let LB[i,j] := x[i]-x[j];
}
else  {
let LB[i,j] := LBx[i]-UBx[j];
}

solve findUBP[i,j];
if solve_result_num < 6 then {
let UBP[i,j] := x[i]+x[j];
}
else  {
let UBP[i,j] := UBx[i]+UBx[j];
}

solve findLBP[i,j];
if solve_result_num < 6 then {
let LBP[i,j] := x[i]+x[j];
}
else  {
let LBP[i,j] := LBx[i]+LBx[j];
}

let Bdiff[i,j] := UB[i,j]-LB[i,j];
let BPdiff[i,j] := UBP[i,j]-LBP[i,j];
}

if card(PAIRS) > 0 then {
display LB, UB, Bdiff;

display LBP, UBP, BPdiff;
}

display _total_solve_elapsed_time;
#
# get upper and lower bounds on (3*)x[i]+-(3*)x[j]
#

for {(i,j) in PAIRS} {
if j = i+1 then {
  display i;
}
solve findUB13[i,j];
if solve_result_num < 6 then {
let UB13[i,j] := x[i]-3*x[j];
}
else {
let UB13[i,j] := UBx[i]-3*LBx[j];
}

solve findLB13[i,j];
if solve_result_num < 6 then {
let LB13[i,j] := x[i]-3*x[j];
}
else {
let LB13[i,j] := LBx[i]-3*UBx[j];
}

solve findUBP13[i,j];
if solve_result_num < 6 then {
let UBP13[i,j] := x[i]+3*x[j];
}
else {
let UBP13[i,j] := UBx[i]+3*UBx[j];
}

solve findLBP13[i,j];
if solve_result_num < 6 then {
let LBP13[i,j] := x[i]+3*x[j];
}
else {
let LBP13[i,j] := LBx[i]+3*LBx[j];
}

solve findUB31[i,j];
if solve_result_num < 6 then {
let UB31[i,j] := 3*x[i]-x[j];
}
else {
let UB31[i,j] := 3*UBx[i]-LBx[j];
}

solve findLB31[i,j];
if solve_result_num < 6 then {
let LB31[i,j] := 3*x[i]-x[j];
}
else {
let LB31[i,j] := 3*LBx[i]-UBx[j];
}

solve findUBP31[i,j];
if solve_result_num < 6 then {
let UBP31[i,j] := 3*x[i]+x[j];
}
else {
let UBP31[i,j] := 3*UBx[i]+UBx[j];
}

solve findLBP31[i,j];
if solve_result_num < 6 then {
let LBP31[i,j] := 3*x[i]+x[j];
}
else {
let LBP31[i,j] := 3*LBx[i]+LBx[j];
}

let Bdiff13[i,j] := UB13[i,j]-LB13[i,j];
let BPdiff13[i,j] := UBP13[i,j]-LBP13[i,j];

let Bdiff31[i,j] := UB31[i,j]-LB31[i,j];
let BPdiff31[i,j] := UBP31[i,j]-LBP31[i,j];
}

if card(PAIRS) > 0 then {
display LB13, UB13, Bdiff13;

display LBP13, UBP13, BPdiff13;

display LB31, UB31, Bdiff31;

display LBP31, UBP31, BPdiff31;

# write out the bounds on the SOC constraints to gams file
printf "TABLE LBd(j,jj)\n               " > QPncg;
for {i in 1..n} {
printf " x%i                ",i > QPncg;
}
printf "\n" > QPncg;
for {i in 1..n} {
printf "x%i ",i > QPncg;
for {j in 1..n} {
  if (i,j) in PAIRS then
printf "%16.8e    ",LB[i,j] > QPncg;
  else
printf "  0.000000000000    " > QPncg;
}
printf "\n" > QPncg;
}
printf " ;\n\n" > QPncg;
#
printf "TABLE UBd(j,jj)\n               " > QPncg;
for {i in 1..n} {
printf " x%i                ",i > QPncg;
}
printf "\n" > QPncg;
for {i in 1..n} {
printf "x%i ",i > QPncg;
for {j in 1..n} {
  if (i,j) in PAIRS then
printf "%16.8e    ",UB[i,j] > QPncg;
  else
printf "  0.000000000000    " > QPncg;
}
printf "\n" > QPncg;
}
printf " ;\n\n" > QPncg;
#
printf "TABLE LBP(j,jj)\n               " > QPncg;
for {i in 1..n} {
printf " x%i                ",i > QPncg;
}
printf "\n" > QPncg;
for {i in 1..n} {
printf "x%i ",i > QPncg;
for {j in 1..n} {
  if (i,j) in PAIRS then
printf "%16.8e    ",LBP[i,j] > QPncg;
  else
printf "  0.000000000000    " > QPncg;
}
printf "\n" > QPncg;
}
printf " ;\n\n" > QPncg;
#
printf "TABLE UBP(j,jj)\n               " > QPncg;
for {i in 1..n} {
printf " x%i                ",i > QPncg;
}
printf "\n" > QPncg;
for {i in 1..n} {
printf "x%i ",i > QPncg;
for {j in 1..n} {
  if (i,j) in PAIRS then
printf "%16.8e    ",UBP[i,j] > QPncg;
  else
printf "  0.000000000000    " > QPncg;
}
printf "\n" > QPncg;
}
printf " ;\n\n" > QPncg;
#
printf "TABLE LB13(j,jj)\n               " > QPncg;
for {i in 1..n} {
printf " x%i                ",i > QPncg;
}
printf "\n" > QPncg;
for {i in 1..n} {
printf "x%i ",i > QPncg;
for {j in 1..n} {
  if (i,j) in PAIRS then
printf "%16.8e    ",LB13[i,j] > QPncg;
  else
printf "  0.000000000000    " > QPncg;
}
printf "\n" > QPncg;
}
printf " ;\n\n" > QPncg;
#
printf "TABLE UB13(j,jj)\n               " > QPncg;
for {i in 1..n} {
printf " x%i                ",i > QPncg;
}
printf "\n" > QPncg;
for {i in 1..n} {
printf "x%i ",i > QPncg;
for {j in 1..n} {
  if (i,j) in PAIRS then
printf "%16.8e    ",UB13[i,j] > QPncg;
  else
printf "  0.000000000000    " > QPncg;
}
printf "\n" > QPncg;
}
printf " ;\n\n" > QPncg;
#
printf "TABLE LB31(j,jj)\n               " > QPncg;
for {i in 1..n} {
printf " x%i                ",i > QPncg;
}
printf "\n" > QPncg;
for {i in 1..n} {
printf "x%i ",i > QPncg;
for {j in 1..n} {
  if (i,j) in PAIRS then
printf "%16.8e    ",LB31[i,j] > QPncg;
  else
printf "  0.000000000000    " > QPncg;
}
printf "\n" > QPncg;
}
printf " ;\n\n" > QPncg;
#
printf "TABLE UB31(j,jj)\n               " > QPncg;
for {i in 1..n} {
printf " x%i                ",i > QPncg;
}
printf "\n" > QPncg;
for {i in 1..n} {
printf "x%i ",i > QPncg;
for {j in 1..n} {
  if (i,j) in PAIRS then
printf "%16.8e    ",UB31[i,j] > QPncg;
  else
printf "  0.000000000000    " > QPncg;
}
printf "\n" > QPncg;
}
printf " ;\n\n" > QPncg;
#
printf "TABLE LBP13(j,jj)\n               " > QPncg;
for {i in 1..n} {
printf " x%i                ",i > QPncg;
}
printf "\n" > QPncg;
for {i in 1..n} {
printf "x%i ",i > QPncg;
for {j in 1..n} {
  if (i,j) in PAIRS then
printf "%16.8e    ",LBP13[i,j] > QPncg;
  else
printf "  0.000000000000    " > QPncg;
}
printf "\n" > QPncg;
}
printf " ;\n\n" > QPncg;
#
printf "TABLE UBP13(j,jj)\n               " > QPncg;
for {i in 1..n} {
printf " x%i                ",i > QPncg;
}
printf "\n" > QPncg;
for {i in 1..n} {
printf "x%i ",i > QPncg;
for {j in 1..n} {
  if (i,j) in PAIRS then
printf "%16.8e    ",UBP13[i,j] > QPncg;
  else
printf "  0.000000000000    " > QPncg;
}
printf "\n" > QPncg;
}
printf " ;\n\n" > QPncg;
#
printf "TABLE LBP31(j,jj)\n               " > QPncg;
for {i in 1..n} {
printf " x%i                ",i > QPncg;
}
printf "\n" > QPncg;
for {i in 1..n} {
printf "x%i ",i > QPncg;
for {j in 1..n} {
  if (i,j) in PAIRS then
printf "%16.8e    ",LBP31[i,j] > QPncg;
  else
printf "  0.000000000000    " > QPncg;
}
printf "\n" > QPncg;
}
printf " ;\n\n" > QPncg;
#
printf "TABLE UBP31(j,jj)\n               " > QPncg;
for {i in 1..n} {
printf " x%i                ",i > QPncg;
}
printf "\n" > QPncg;
for {i in 1..n} {
printf "x%i ",i > QPncg;
for {j in 1..n} {
  if (i,j) in PAIRS then
printf "%16.8e    ",UBP31[i,j] > QPncg;
  else
printf "  0.000000000000    " > QPncg;
}
printf "\n" > QPncg;
}
printf " ;\n\n" > QPncg;
#


#
}

display _total_solve_elapsed_time;

printf "soc bound time  %12.4e\n", _total_solve_elapsed_time -prevtime >> QPloopf.out;
let prevtime := _total_solve_elapsed_time;

#
# get the socp lower bound
#

solve QPsocp;

let LBsocp := sum{j in 1..n} c0[j] * x[j]
  + 0.5 * sum{i in 1..p: Qdiag[i,0] > 0} Qdiag[i,0] *x[i] *x[i]
  + 0.5 * sum{i in 1..p : Qdiag[i,0] < 0} (const_offset[i,0] +
                  scaleQdiag[i,0] * (x[i]-LBx[i]))
  #+ 0.5 * sum{i in 1..p: Qdiag[i,0] < 0} Qdiag[i,0] *x[i]
  + sum{i in 1..p-1, j in i+1..p} Q[i,j,0] *w[i,j];

if solve_result_num < 6 then {
   let LBs:=LBsocp;

   let wxx := 0;
   let wxxdiff := 0;
   for {i in 1..p-1, j in i+1..p} {
   let diff := abs(w[i,j] - x[i]*x[j]);
   let wxxdiff := wxxdiff + diff;
   if diff > 0.01 then {
     let wxx := wxx+1;
   }
   }

display x;

display UBobj, LBmcc, LBmccB, LBsocp;
if LBsocp - LBm2 > 1.e-6 then {
printf "Improve on McCormick bounds\n";
printf "Fraction of gap closed is %7.3f\n",(LBsocp-LBmcc)/(UBobj-LBmcc);
}
else {
printf "No improvement on McCormick\n";
}

solve QPsocpP;

let LBsocpP := sum{j in 1..n} c0[j] * x[j]
  + 0.5 * sum{i in 1..p: Qdiag[i,0] > 0} Qdiag[i,0] *x[i] *x[i]
  + 0.5 * sum{i in 1..p : Qdiag[i,0] < 0} (const_offset[i,0] +
                  scaleQdiag[i,0] * (x[i]-LBx[i]))
  #+ 0.5 * sum{i in 1..p: Qdiag[i,0] < 0} Qdiag[i,0] *x[i]
  + sum{i in 1..p-1, j in i+1..p} Q[i,j,0] *w[i,j];

if solve_result_num < 6 then {
   let wxx := 0;
   let wxxdiff := 0;
   for {i in 1..p-1, j in i+1..p} {
   let diff := abs(w[i,j] - x[i]*x[j]);
   let wxxdiff := wxxdiff + diff;
   if diff > 0.01 then {
     let wxx := wxx+1;
   }
   }

display x;

display UBobj, LBmcc, LBmccB, LBsocp, LBsocpP;
if LBsocpP - LBsocp > 1.e-6 then {
printf "Positive SOCP constraints help\n";
printf "Fraction of gap closed is %7.3f\n",(LBsocpP-LBmcc)/(UBobj-LBmcc);
}

solve QPsocp13;

let LBsocp13 := sum{j in 1..n} c0[j] * x[j]
  + 0.5 * sum{i in 1..p: Qdiag[i,0] > 0} Qdiag[i,0] *x[i] *x[i]
  + 0.5 * sum{i in 1..p : Qdiag[i,0] < 0} (const_offset[i,0] +
                  scaleQdiag[i,0] * (x[i]-LBx[i]))
  #+ 0.5 * sum{i in 1..p: Qdiag[i,0] < 0} Qdiag[i,0] *x[i]
  + sum{i in 1..p-1, j in i+1..p} Q[i,j,0] *w[i,j];

#display x;
#display w;

if solve_result_num < 6 then {
   let wxx := 0;
   let wxxdiff := 0;
   for {i in 1..p-1, j in i+1..p} {
   let diff := abs(w[i,j] - x[i]*x[j]);
   let wxxdiff := wxxdiff + diff;
   if diff > 0.01 then {
     let wxx := wxx+1;
   }
}
}
else {
   printf "socp13 numerical problems" >> lpccloop.out;
   let LBsocp13:=LBsocpP;
}

}
else {
   printf "socpP numerical problems" >> lpccloop.out;
   let LBsocpP:=LBs;
   let LBsocp13:=LBs;
}

}
else {
   printf "socp numerical problems" >> lpccloop.out;
   let LBs:=LBm2;
   let LBsocpP:=LBm2;
   let LBsocp13:=LBm2;
   let wxx:=wxxmccB;
   let wxxdiff:=wxxmccBdiff;
}

printf "soc time for three problems  %12.4e\n", _total_solve_elapsed_time -prevtime >> QPloopf.out;
let prevtime := _total_solve_elapsed_time;

if LBsocp13 - LBsocpP > 1.e-6 then {
printf "1n3 SOCP constraints help\n";
}

printf "Fraction of gap closed is %7.3f\n",(LBsocp13-LBmcc)/(UBobj-LBmcc);

display wxxmcc, wxxmccB, wxx >> QPloopf.out;
display wxxmccdiff, wxxmccBdiff, wxxdiff >> QPloopf.out;

let frac := (LBsocp13 - LBm)/(UBobj-LBm);
let fracI := (LBsocp - LBm2)/(UBobj-LBm);
let fracP := (LBsocpP - LBm2)/(UBobj-LBm);
let frac13 := (LBsocp13 - LBm2)/(UBobj-LBm);

display UBobj, LBmcc, LBmccB, LBsocp, LBsocpP, LBsocp13; #,LBtri,LBsoctri;
display UBobj, LBmcc, LBmccB, LBsocp, LBsocpP, LBsocp13 #,LBtri,LBsoctri
   >> QPloopf.out;
display frac,fracm2,fracI,fracP,frac13 # ,fract,fracst
   >> QPloopf.out;
printf "*ampl res : LBmcc %16.8e, LBm2 %16.8e, LBsocp13 %16.8e, UBobj %16.8e\n",
LBmcc,LBm2,LBsocp13,UBobj > QPncg;


}
}
}
}

# print out the remaining part of the GAMS model file

printf "\n" > QPncg;
printf "POSITIVE VARIABLES x(j);\n" > QPncg;

printf "\n" > QPncg;
printf "VARIABLES z;\n" > QPncg;

printf "\n" > QPncg;
printf "EQUATIONS\n" > QPncg;
printf "   OBJective\n" > QPncg;
printf "   xub\n" > QPncg;
printf "   cQ(QuadCons)\n" > QPncg;
printf "   cL(LinCons);\n" > QPncg;

printf "\n" > QPncg;
printf "OBJective.. z =e= SUM(j, c0(j) * x(j))\n" > QPncg;
printf "  + 0.5*SUM((j,jj),x(j) * Q0(j,jj) *x(jj));\n" > QPncg;

printf "\n" > QPncg;
printf "xub(j)..  x(j) =l= 1;\n" > QPncg;

printf "\n" > QPncg;
printf "cQ(QuadCons).. g(QuadCons) =g=\n" > QPncg;
printf "  SUM(j, cmat(QuadCons,j)*x(j)) +\n" > QPncg;
printf "  0.5*SUM((j,jj),x(j) * Q(j,jj,QuadCons) *x(jj));\n" > QPncg;

printf "\n" > QPncg;
printf "cL(LinCons)..\n" > QPncg;
printf "  SUM(j, Amat(LinCons,j)*x(j)) =l= b(LinCons);\n" > QPncg;

printf "\n" > QPncg;
printf "model QPncg  /all/;\n" > QPncg;

printf "\n" > QPncg;
printf "solve QPncg using nlp minimizing z;\n" > QPncg;

display _total_solve_elapsed_time;
