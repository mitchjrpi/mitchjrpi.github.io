#
# for larger values of n, need to generate the data in such a way
# that an upper bound is readily available.
# ie, generate it so that a particular point is feasible.
#

reset;
display _total_solve_elapsed_time;
option solver cplexamp;
model diamond.mod;
data diamond.dat;

param nruns := 5;

param nrefine := 0;
param LBmcc{l in 1..nruns};
param LBmccB{l in 1..nruns, k in 1..nrefine};
param LBmccBn{l in 1..nruns};
param LBsocpP{l in 1..nruns};
param UBo{l in 1..nruns};
param frac{l in 1..nruns};

param wxxmcc{l in 1..nruns};
param wxxmccB{l in 1..nruns};
param wxx{l in 1..nruns};
param wxxmccdiff{l in 1..nruns};
param wxxmccBdiff{l in 1..nruns};
param wxxdiff{l in 1..nruns};
param sfix{l in 1..nruns};
param wdrat{l in 1..nruns};
param diff;

param timemcc{l in 1..nruns};
param timesocp{l in 1..nruns};
param timeprev;

param Bdiff{i in 1..p-1, j in i+1..p};
param BPdiff{i in 1..p-1, j in i+1..p};


#problem originalQP:x, c0obj, cQ;

problem QPmcc: x, w, c0objlin, cQlin, conLBP, conUBP, conLBM, conUBM,
McCormicka, McCormickb, McCormickc;

problem QPmccB: x, w, c0objlin, cQlin, conLBP, conUBP, conLBM, conUBM,
McCormickaB, McCormickbB, McCormickcB, McCormickdB;

problem QPsocp: x, w, c0objlin, cQlin, conLBP, conUBP, conLBM, conUBM,
#McCormicka, McCormickb, McCormickc,
McCormickaB, McCormickbB, McCormickcB, McCormickdB,
soc;

problem QPsocpP: x, w, c0objlin, cQlin, conLBP, conUBP, conLBM, conUBM,
#McCormicka, McCormickb, McCormickc,
McCormickaB, McCormickbB, McCormickcB, McCormickdB,
soc, socP;

problem findLBx{i in 1..n}: x, w, optLBx[i], cQlin, conLBP, conUBP, conLBM, conUBM,
McCormicka, McCormickb, McCormickc,
bound_obj;

problem findUBx{i in 1..n}: x, w, optUBx[i], cQlin, conLBP, conUBP, conLBM, conUBM,
McCormicka, McCormickb, McCormickc,
bound_obj;

problem findLB{i in 1..p-1, j in i+1..p}: x, w, optLB[i,j], cQlin, conLBP, conUBP, conLBM, conUBM,
#McCormicka, McCormickb, McCormickc,
McCormickaB, McCormickbB, McCormickcB, McCormickdB,
bound_obj;

problem findUB{i in 1..p-1, j in i+1..p}: x, w, optUB[i,j], cQlin, conLBP, conUBP, conLBM, conUBM,
#McCormicka, McCormickb, McCormickc,
McCormickaB, McCormickbB, McCormickcB, McCormickdB,
bound_obj;

problem findLBP{i in 1..p-1, j in i+1..p}: x, w, optLBP[i,j], cQlin, conLBP, conUBP, conLBM, conUBM,
#McCormicka, McCormickb, McCormickc,
McCormickaB, McCormickbB, McCormickcB, McCormickdB,
bound_obj;

problem findUBP{i in 1..p-1, j in i+1..p}: x, w, optUBP[i,j], cQlin, conLBP, conUBP, conLBM, conUBM,
#McCormicka, McCormickb, McCormickc,
McCormickaB, McCormickbB, McCormickcB, McCormickdB,
bound_obj;

#
# initialize timers
#
let timeprev := _total_solve_elapsed_time;

#
# get the mccormick lower bound
#

for {l in 1..nruns} {

printf "Now solve problem number %2i of size n=%4i\n",l,n;

reset data c0, cmat, Q, g;
reset data UBobj, UBx, LBx, UB, LB, UBP, LBP;

let UBo[l] := UBobj;

solve QPmcc;

let LBmcc[l] := sum{j in 1..n} c0[j] * x[j]
  + 0.5 * sum{i in 1..p-1, j in i+1..p} Q[i,j,0] *w[i,j];

display x;
#display w;

let wxxmcc[l] := 0;
let wxxmccdiff[l] := 0;
for {i in 1..p-1, j in i+1..p} {
let diff:= abs(w[i,j] - x[i]*x[j]);
let wxxmccdiff[l] := wxxmccdiff[l] + diff;
if diff > 0.01 then {
#if w[i,j] > x[i]*x[j] + 0.01 then {
  let wxxmcc[l] := wxxmcc[l]+1;
}
#if w[i,j] < x[i]*x[j] - 0.01 then {
#  let wxxmcc := wxxmcc+1;
#}
}

display _total_solve_elapsed_time;
let timemcc[l] :=  _total_solve_elapsed_time - timeprev;
let timeprev :=  _total_solve_elapsed_time;

if UBo[l] - LBmcc[l] < 1.e-6 then {
printf "McCormick bounds suffice\n";
display UBo[l], LBmcc[l];
display wxxmcc[l];
}
else {

for {k in 1..nrefine} {
#
# refine bounds on x[i] to try to improve McCormick
#
for {i in 1..p} {
solve findUBx[i];
let UBx[i] := x[i];
solve findLBx[i];
let LBx[i] := x[i];
}

solve QPmccB;

let LBmccB[l,k] := sum{j in 1..n} c0[j] * x[j]
  + 0.5 * sum{i in 1..p-1, j in i+1..p} Q[i,j,0] *w[i,j];
}

if nrefine > 0 then {
display x;
#display w;

display LBx, UBx;

let wxxmccB[l] := 0;
let wxxmccBdiff[l] := 0;
for {i in 1..p-1, j in i+1..p} {
let diff:= abs(w[i,j] - x[i]*x[j]);
let wxxmccBdiff[l] := wxxmccBdiff[l] + diff;
if diff > 0.01 then {
#if w[i,j] > x[i]*x[j] + 0.01 then {
  let wxxmccB[l] := wxxmccB[l]+1;
}
#if w[i,j] < x[i]*x[j] - 0.01 then {
#  let wxxmccB[l] := wxxmccB[l]+1;
#}
}
display _total_solve_elapsed_time;

let wxxmccB[l] := 0;
for {i in 1..p-1, j in i+1..p} {
if w[i,j] > x[i]*x[j] + 0.01 then {
  let wxxmccB[l] := wxxmccB[l]+1;
}
if w[i,j] < x[i]*x[j] - 0.01 then {
  let wxxmccB[l] := wxxmccB[l]+1;
}
}
   let LBmccBn[l] := LBmccB[l,nrefine];
}
else {
   let LBmccBn[l] := LBmcc[l];
   let wxxmccB[l] := wxxmcc[l];
   let wxxmccBdiff[l] := wxxmccdiff[l];
   for {i in 1..n} {
      let UBx[i] := 1;
      let LBx[i] := 0;
   }
}

if UBo[l] - LBmccBn[l] < 1.e-6 then {
printf "Improved McCormick bounds suffice\n";
if nrefine > 0 then {
  display UBo[l], LBmcc[l], LBmccB[l,nrefine];
}
else {
  display UBo[l], LBmcc[l];
}
display wxxmcc[l], wxxmccB[l];
}
else {

#
# get upper and lower bounds on x[i]+-x[j]
#

for {i in 1..p-1, j in i+1..p} {
#if j = i+1 then {
#  display i;
#}
#solve findUB[i,j];
#let UB[i,j] := x[i]-x[j];
let UB[i,j] := 0.5;

#solve findLB[i,j];
#let LB[i,j] := x[i]-x[j];
let LB[i,j] := -0.5;

#solve findUBP[i,j];
#let UBP[i,j] := x[i]+x[j];
let UBP[i,j] := 1.5;

#solve findLBP[i,j];
#let LBP[i,j] := x[i]+x[j];
let LBP[i,j] := 0.5;

#let Bdiff[i,j] := UB[i,j]-LB[i,j];
#let BPdiff[i,j] := UBP[i,j]-LBP[i,j];
}
#display LB, UB, Bdiff;

#display LBP, UBP, BPdiff;

#display _total_solve_elapsed_time;

#
# get the socp lower bound
#

solve QPsocpP;

let LBsocpP[l] := sum{j in 1..n} c0[j] * x[j]
  + 0.5 * sum{i in 1..p-1, j in i+1..p} Q[i,j,0] *w[i,j];

#display w;
display x;

if nrefine > 0 then {
  display UBo[l], LBmcc[l], LBmccB[l,nrefine], LBsocpP[l];
}
else {
  display UBo[l], LBmcc[l], LBsocpP[l];
}
if LBsocpP[l] - LBmccBn[l] > 1.e-6 then {
printf "SOCP constraints help\n";
let frac[l] := (LBsocpP[l]-LBmcc[l])/(UBo[l]-LBmcc[l]);
#printf "Fraction of gap closed is %7.3f\n",(LBsocpP[l]-LBmcc[l])/(UBo[l]-LBmcc[l]);
printf "Fraction of gap closed is %7.3f\n",frac[l];
}

let wxx[l] := 0;
let wxxdiff[l] := 0;
for {i in 1..p-1, j in i+1..p} {
let diff:= abs(w[i,j] - x[i]*x[j]);
let wxxdiff[l] := wxxdiff[l] + diff;
if diff > 0.01 then {
#if w[i,j] > x[i]*x[j] + 0.01 then {
  let wxx[l] := wxx[l]+1;
}
#if w[i,j] < x[i]*x[j] - 0.01 then {
#  let wxx[l] := wxx[l]+1;
#}
}
let sfix[l] := wxxmcc[l]-wxx[l];
let wdrat[l] := wxxdiff[l] / wxxmccdiff[l];


if nrefine > 0 then {
  display UBo[l], LBmcc[l], LBmccB[l,nrefine], LBsocpP[l];

  display wxxmcc[l], wxxmccB[l], wxx[l];
  display wxxmccdiff[l], wxxmccBdiff[l], wxxdiff[l];
}
else {
  display UBo[l], LBmcc[l], LBsocpP[l];

  display wxxmcc[l], wxx[l], sfix[l];
  display wxxmccdiff[l], wxxdiff[l], wdrat[l];
}

}
}

display _total_solve_elapsed_time;
let timesocp[l] := _total_solve_elapsed_time - timeprev;
let timeprev :=  _total_solve_elapsed_time;
}

display LBmcc, LBsocpP, UBo, frac;

if nrefine > 0 then {
  display wxxmcc, wxxmccB, wxx;
  display wxxmccdiff, wxxmccBdiff, wxxdiff;
}
else {
  display n, nQ >> diamond.out;
  display LBmcc, LBsocpP, UBo, frac >> diamond.out;
  display wxxmcc, wxx, sfix >> diamond.out;
  display wxxmccdiff, wxxdiff, wdrat >> diamond.out;
  display timemcc, timesocp >> diamond.out;
}
