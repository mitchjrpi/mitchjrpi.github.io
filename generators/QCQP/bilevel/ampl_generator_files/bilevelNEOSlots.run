problem LPrelax: x, w, y, ytilde, bilevelobj, bcon, gcon,
          def_ytilde, KKTgrad;

problem quadrelax: x, w, y, ytilde, sigma, bilevelobj, bcon, gcon,
          def_ytilde, KKTgrad, lifted, quadcon;

problem original: x, w, y, ytilde, bilevelobj, bcon, gcon,
          def_ytilde, KKTgrad, unlifted;

problem innerQP: x, innerQPobj, gcon;

for {kk in 1..10} {

for {kk2 in 1..10} {

for {kk3 in 1..10} {

reset data;

let n := 5*kk;
let bdim := n+20*kk2;
let gdim := n+20*kk3;

display n,bdim,gdim;


printf "Solve LP relaxation\n";
solve LPrelax;     #  
display x,w,ytilde,c,d;

for {i in 1..n}{
  let x[i] := 1;
  let ytilde[i] := 0;
  }

for {j in 1..gdim} {
  let y[j] := 0;
  }

printf "Solve convex quadratic relaxation\n";
solve quadrelax;
display x,w,ytilde,c,d;

for {i in 1..n}{
  let x[i] := 1;
  let ytilde[i] := 0;
  }

for {j in 1..gdim} {
  let y[j] := 0;
  }

printf "Solve LPCC to local optimality\n";
solve original;
display x,w,ytilde,c,d;
#
#for {i in 1..n}{
#  let wfix[i] := w[i];
#  }
#
#for {i in 1..n}{
#  let x[i] := 1;
#  }
#
#printf "Solve innerQP for optimal w\n";
#solve innerQP;
#display x,wfix;
#display sum{i in 1..n} x[i]*(0.5*x[i]+wfix[i]);

# end the counter loops
}
}
}
